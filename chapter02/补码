机器数:
    一个属在计算机中的二进制表示形式 叫做这个数的机器数
    机器数是带符号的 在计算机中用一个属的最高位存放符号 正数-0 负数-1
    比如
        十进制数 +3: 0000 0000 0000 0000 0000 0000 0000 0011
        十进制数 -3: 1000 0000 0000 0000 0000 0000 0000 0011
        实际上-3的补码: 1111 1111 1111 1111 1111 1111 1111 1101

真值:
    真正数学意义上的数值
    因为第一位是符号位 所以机器码的形式值不等于真值
    0000 0000 0000 0000 0000 0000 0000 0011 -> +3
    1111 1111 1111 1111 1111 1111 1111 1101 -> -3

无符号数的编码:
    0001: 0*2^3+0*2^2+0*2^1+1*2^0 = 1
    0101: 0*2^3+1*2^2+0*2^1+1*2^0 = 5
    1011: 1*2^3+0*2^2+1*2^1+1*2^0 = 11
    1111: 1*2^3+1*2^2+1*2^1+1*2^0 = 15

有符号数的编码:
    0001: -(0*2^3)+0*2^2+0*2^1+1*2^0 = 1
    0101: -(0*2^3)+1*2^2+0*2^1+1*2^0 = 5
    1011: -(1*2^3)+0*2^2+1*2^1+1*2^0 = -5
    1111: -(1*2^3)+1*2^2+1*2^1+1*2^0 = -1

另一种求补码的方法:
    对正数: 直接按位计算权重和
    对负数: 保留符号位 对后面每位取反+1

补码数值范围举例:
         8    16     32          64
    UMax 0xFF 0xFFFF 0xFFFFFFFF  0xFFFFFFFFFFFFFFFF
         255  65535  4294967295  18446744073709551615
    TMin 0x80 0x8000 0x80000000  0x8000000000000000
         -128 -32768 -2147483648 -9223372036854775808
    TMax 0x7F 0x7FFF 0x7FFFFFFF  0x7FFFFFFFFFFFFFFF
         127  32767  2147483647  9223372036854775807
    -1   0xFF 0xFFFF 0xFFFFFFFF  0xFFFFFFFFFFFFFFFF
    0    0x00 0x0000 0x00000000  0x0000000000000000

使用补码的好处:
    0只有一种表示方式

为什么在计算机中32767+1=-32768


如何在只有加法运算时做减法运算(为什么使用补码)
    在设计软件系统是希望软件系统尽可能简单通用 于是希望在只有加法计算器的情况下设计一种方法能计算减法
    举例:
        当前时间8点 3小时前是5点 9小时以后还是5点
        因为 8+9-12=5 还是5点
        这里实际上进行了模12操作 还有一个关键点总共只有12个数
        得到的结论 ==> 8-3和8+9的结果是一样的 可以用9去表示-3
                     如果想计算8-3就可以输入8+9

        可以得到一张对照表 到12就清0
        0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11
        0 11 10 9  8  7  6  5  4  3  2   1
        5-3 ==> (5+9)%12=2
        3-5 ==> 3+7 ==> 10%12=10
        10对应的是-2 但是2对应的是-10 无法解释5-3为什么不等于-10

        于是对表进行修改
        0 -1 -2 -3 -4 -5 -6 5 4 3 2 1
        0 11 10 9  8  7  6  5 4 3 2 1
        5-3 ==> (5+9)%12=2 ==> 2
        3-5 ==> (3+7)%12=10 ==> -2
        新的表可以得到正确答案
        在计算机内部就是使用补码来构造这样一张映射表