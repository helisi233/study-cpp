递归的四个基本法则
    基准情形
        无序递归就能解出
    不断推进
        每一次递归调用都必须使求解状况晁接近基准情形的方向推进
    设计法则
        假设所有的递归调用都能运行
    合成效益法则
        求解一个问题的同一个实例时，且勿再不同的递归调用中做重复性的工作

由此可见，使用递归来计算注入斐波那契数列并不是最好的实现

重复计算
    Fib(4) -> Fib(3) -> Fib(2) -> Fib(1)
                               -> Fib(0)
                     -> Fib(1)
           -> Fib(2) -> Fib(1)
                     -> Fib(0)

递归是一种重要的编程思想
    很多算法都包含递归的思想（归并、快排）
    递归最大的缺陷
        空间上需要开辟大量的栈空间
        时间上可能需要有大量重复计算

递归的优化
    尾递归
        所有递归形式的调用都出现在函数的末尾
    使用循环替代
    使用动态规划，空间换时间

优化选项


















