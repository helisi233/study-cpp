智能指针
    使用指针是非常危险的行为 可能存在空指针 野指针问题 并可能造成内存泄露问题
    可指针由非常高效 所以希望以更安全的方式来使用指针

    典型方案
        使用更安全的指针--智能指针
        不适用指针 使用更安全的方式--引用

    C++由四种常用的智能指针
        unique_ptr、shared_ptr、weak_ptr和C++11中已经废弃的auto_ptr 在C++17中被正式删除

    应用场景
        对象所有权
        生命周期

    性能分析

    auto_ptr
        由new expression获得对象 在auto_ptr对象销毁时 他管理的对象也会自动被delete掉
        auto_ptr_old = 对象;
        auto_ptr_new = 对象;
        同一个对象被新的auto_ptr指向的时候 在拷贝/赋值过程中 会剥夺老的auto_ptr对这个对象
        的所有权 对象被转交给新对象 然后老的auto_ptr被赋值乘nullptr

        源码
            析构函数
                ~auto_ptr() { delete _M_ptr; }
            赋值
                auto_ptr& operator=(auto_ptr& __a) throw()
                {
                	reset(__a.release());
                	return *this;
                }

                element_type* release() throw()
                {
                	element_type* __tmp = _M_ptr;
                	_M_ptr = 0;
                	return __tmp;
                }

                void reset(element_type* __p = 0) throw()
                {
                	if (__p != _M_ptr)
                	{
                	    delete _M_ptr;
                	    _M_ptr = __p;
                	}
                }

    unique_ptr
        unique_ptr是专属所有权 当unique_ptr指向一个对象后 这个对象不能通过赋值或复制的操作被
        其他unique_ptr指向
        移动语义
            unique_ptr禁止了拷贝语义 使用移动语义可以转移所有权
            使用std::move() 进行控制所有权的转移
            控制权转移后 原unique_ptr被置为nullptr
        源码
            返回一个unique_ptr类型指针 从堆中分配
            inline __detail::__unique_ptr_t<_Tp> make_unique(_Args&&... __args)
            {
                return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));
            }

            返回指向对象的指针
            pointer get() const noexcept
            {
                return _M_t._M_ptr();
            }

            constexpr typename std::remove_reference<_Tp>::type&& move(_Tp&& __t) noexcept
            {
                return static_cast<typename std::remove_reference<_Tp>::type&&>(__t);
            }

            析构函数
            ~unique_ptr() noexcept
            {
            	static_assert(__is_invocable<deleter_type&, pointer>::value,
            		      "unique_ptr's deleter must be invocable with a pointer");
            	auto& __ptr = _M_t._M_ptr();
            	if (__ptr != nullptr)
            	  get_deleter()(std::move(__ptr));
            	__ptr = pointer();
            }

    shared_ptr
        通过一个引用计数共享一个对象
        shared_ptr是为了解决auto_ptr在对象所有权上的局限性 在使用引用计数的机制上提供了可以共享
        所有权的智能指针 当然这需要额外的开销
        当引用计数为0时 该对象没有被使用 可以进行析构

        循环引用
            引用计数回带来循环引用的问题
            对象A(包含智能指针ptrA) <----> 对象B(包含智能指针ptrB)
            ptrA指向对象B ptrB指向对象A
            导致A和B因为有了对方的指向无法释放
            循环引用会导致堆里的内存无法正常回收 造成内存泄露

    weak_ptr













