C++基础容器-数组:
    概念:
        代表内存里一组连续的同类型存储区
        可以用来把多个存储区合并成一个整体

    比如:
        int arr[10] = {1,2,3,4,5,6,7,8};

    数组声明:
        int arr[10];
        类型名称int表示数组里所有元素的类型
        名称arr是数组的名称
        整数10表示数组里包含的元素个数
        数组里元素个数不可以改变

    使用:
        每个元素都有下标 通过下标可以直接访问任意一个元素
        下标从0开始到元素个数减1为止
        超过范围的下标不可以使用
        数组名称和下标一起可以表示数组里的元素 arr[4];
        0 1 2 3 4 5 6 7 8 9
        1 2 3 4 5 6 7 8

    优点:
        可以编写循环一次处理数组的元素
        循环变量依次代表数组有效下标

    off-by-one error数组下标:
        原则:
            首先考虑最简单情况的特例,然后将结果外推
            仔细计算边界
        简单问题:
            假定整数x满足边界条件x>=16并且x<=37 那么次范围内x的可能取值个数有多少
            x的上界与下界重合时 x>=16 && x <=16 显然个数是1
            假定下界low 上界high 当low与high重合时 low=high时 个数为1 据此外推
            high-low+1个元素 37-16+1=22
            使用编程的方式解决,使用数学上的左闭又开来表示范围
                问题表示位 x>=16并且x<37 ==> (x>=16 && x<38) 这样38-16=22
                一般使用for(int i = 0;i < 10; ++i){}
                而不是for(int i = 0;i <= 9; ++i){}

    C语言设计数组下标的原则 从0开始使用非对称区间
        让这个区间是一个非对称区间[, )
        让下界(左侧)可以取到值 让下界(右侧)取不到值
        这样设计的好处:
            取值范围的大小: 上界-下界
            如果这个取值范围为空: 上界值=下界值
            即时取值范围为空,上界值永远不可能小于下界值